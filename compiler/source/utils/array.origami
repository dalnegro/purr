% language: origami

function map(array, fn) {
  array.map((x, _, _) => fn(x));
}

function flatmap(array, fn) {
  flatten(map(array, fn));
}

function flatten(array) {
  reduce(array, [], (a, b) => a ++ b);
}

function filter(array, fn) {
  array.filter((x, _, _) => fn(x));
}

function reduce(array, initial, fn) {
  array.reduce((x, y, _, _) => fn(x, y), initial);
}

function reduce1(array, fn) {
  assert array.length > 0;
  array.reduce((x, y, _, _) => fn(x, y));
}

function reduceRight(array, initial, fn) {
  array.reduceRight((x, y, _, _) => fn(x, y), initial);
}

function reduceRight1(array, fn) {
  assert array.length > 0;
  array.reduceRight((x, y, _, _) => fn(x, y));
}

function first(array) {
  assert array.length > 0;
  array[0];
}