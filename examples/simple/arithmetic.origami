% version: 1


union Expr {
  case Add(left :: Expr, right :: Expr);
  case Mul(left :: Expr, right :: Expr);
  case Sub(left :: Expr, right :: Expr);
  case Div(left :: Expr, right :: Expr);
  case Num(value :: Number);
}


let grammar = @origami.grammar.peg """
Arithmetic {
  Expr
    = a:Expr "+" b:Expr   { new Expr.Add(a, b); }
    / a:Expr "-" b:Expr   { new Expr.Sub(a, b); }
    / a:Expr "*" b:Expr   { new Expr.Mul(a, b); }
    / a:Expr "/" b:Expr   { new Expr.Div(a, b); }
    / Prim
    ;

  Prim
    = Number
    / "(" a:Expr ")"    { a; }
    ;

  Number
    = x:digit+    { new Expr.Num(Number(x.join(""))); }
    ;
}
""";


function evaluate(node :: Expr) -> Number {
  match node {
    case Expr.Num(v): v;
    case Expr.Add(a, b): evaluate(a) + evaluate(b);
    case Expr.Sub(a, b): evaluate(a) - evaluate(b);
    case Expr.Div(a, b): evaluate(a) / evaluate(b);
    case Expr.Mul(a, b): evaluate(a) * evaluate(b);
  }
}


function main(_ :: Array<String>) {
  let ast :: Expr = parse("1 + 2 * 3");
  console.log("Source: 1 + 2 * 3");
  console.log("\nAST:");
  console.log(ast);
  console.log("\nEvaluated:");
  console.log(evaluate(ast));
}