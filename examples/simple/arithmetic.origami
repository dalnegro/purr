% version: 1

class Expr() {}
data class Add(left, right) extends Expr() {}
data class Mul(left, right) extends Expr() {}
data class Sub(left, right) extends Expr() {}
data class Div(left, right) extends Expr() {}
data class Num(value) extends Expr() {}

function grammar() = <origami.grammar.peg>"""
    Arithmetic {
      Expr
        = a:Expr "+" b:Expr   { new Add(a, b); }
        / a:Expr "-" b:Expr   { new Sub(a, b); }
        / a:Expr "*" b:Expr   { new Mul(a, b); }
        / a:Expr "/" b:Expr   { new Div(a, b); }
        / Prim
        ;

      Prim
        = Number
        / "(" a:Expr ")"    { a; }
        ;

      Number
        = x:digit+    { new Num(Number(x.join(""))); }
        ;
    }
  """;

function evaluate(node) {
  match node {
    case Num(v): v;
    case Add(a, b): evaluate(a) + evaluate(b);
    case Sub(a, b): evaluate(a) - evaluate(b);
    case Div(a, b): evaluate(a) / evaluate(b);
    case Mul(a, b): evaluate(a) * evaluate(b);
  }
}

function main(_) {
  let ast = grammar().parse("1 + 2 * 3");
  console.log("Source: 1 + 2 * 3");
  console.log("\nAST:");
  console.log(ast);
  console.log("\nEvaluated:");
  console.log(evaluate(ast));
}