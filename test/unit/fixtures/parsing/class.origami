% version: 1
% pass: true

/* Documentation */
class A() { }

/* Documentation */
data class A() { }

// Classes with a super
class A(b) extends B(c) { }

// Classes with members + constructor
class A() {
  constructor;

  /* Documentation */
  static _.f() { }
  static _.f(a, b) { }
  static async _.f() { }
  static* _.f() { }
  static _.f <- g { }
  static _.f { }
  static _[a] { }
  static _[a] <- b { }
  static a === b { }
  static a =/= b { }
  static a >= b { }
  static a >= b { }
  static a >> b { }
  static a > b { }
  static a << b { }
  static a < b { } 
  static a ++ b { }
  static a + b { }
  static a - b { }
  static a ** b { }
  static a * b { }
  static a / b { }
  static a and b { }
  static a or b { }
  static b in a { }
  static not a { }

  /* Documentation */
  member _.f() { }
  member _.f(a, b) { }
  member async _.f() { }
  member* _.f() { }
  member _.f <- g { }
  member _.f { }
  member _[a] { }
  member _[a] <- b { }
  member a === b { }
  member a =/= b { }
  member a >= b { }
  member a >= b { }
  member a >> b { }
  member a > b { }
  member a << b { }
  member a < b { } 
  member a ++ b { }
  member a + b { }
  member a - b { }
  member a ** b { }
  member a * b { }
  member a / b { }
  member a and b { }
  member a or b { }
  member b in a { }
  member not a { }  
}


// Classes + fields + constructor
class A() {
  /* Doc */
  field x = 1;
  field y = 2;
  let a = b;
  x <- y;
}

// Spread
class A(a, ...b) extends B(a, ...b) {}
class A(...b) extends B(...b) {}
class A() {
  member _.f(...a) = a;
  member _.f(a, ...b) = a;
  static _.f(...a) = a;
  static _.f(a, ...b) = a;
}

// Named parameters
class A(a, b: c, c: d = 1) extends B(a, b: c) {}
class A(b: c) extends B(b: c) {}
class A() {
  member _.f(a, b: c, c: d = 1) = a;
  member _.f(b: c) = c;
  static _.f(a, b: c, c: d = 1) = a;
  static _.f(b: c) = c;
}

// Contracts
class A(x :: a) extends B() {
  field x :: a = 1;

  static (x :: a).f() -> a {}  
  static _.f(x :: a) -> a {}
  static _.f(x) -> a {}
  static _.f(x :: a) {}
  static _.f <- (g :: a) {}
  static _.f {}
  static (x :: a) === (y :: a) -> a {}
  static (x :: a) === y -> a {}
  static x === (y :: a) -> a {}
  static x === y -> a {}
  static (x :: a) === (y :: a) {}
  static (x :: a) in (y :: a) {}
  static x in y -> a {}
  static not (x :: a) -> a {}
  static not x -> a {}
  static not (x :: a) {}

  member (x :: a).f() -> a {}  
  member _.f(x :: a) -> a {}
  member _.f(x) -> a {}
  member _.f(x :: a) {}
  member _.f <- (g :: a) {}
  member _.f {}
  member (x :: a) === (y :: a) -> a {}
  member (x :: a) === y -> a {}
  member x === (y :: a) -> a {}
  member x === y -> a {}
  member (x :: a) === (y :: a) {}
  member (x :: a) in (y :: a) {}
  member x in y -> a {}
  member not (x :: a) -> a {}
  member not x -> a {}
  member not (x :: a) {}
}