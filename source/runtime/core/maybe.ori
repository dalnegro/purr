% version: 1

union Maybe<'A>
  | Just(value :: 'A)
  | Nothing()
end

define map(value :: Maybe<'A>, with: fn :: ('A) -> 'B) -> Maybe<'B> =
  match value as Maybe with
    | Just(v) -> Maybe.Just(fn(v))
    | Nothing -> Maybe.Nothing()
  end

define chain(value :: Maybe<'A>, with: fn :: ('A) -> Maybe<'B>) -> Maybe<'B> =
  match value as Maybe with
    | Just(v) -> f(v)
    | Nothing -> Maybe.Nothing()
  end

define apply(fn :: Maybe<('A) -> 'B>, to: container :: Maybe<'A>) -> Maybe<'B> =
  chain(fn, with: (f) => map(container, with: f))

define get(value :: Maybe<'A>, fallback: fallback :: () -> 'A) -> 'A =
  match value as Maybe with
    | Just(v) -> v
    | Nothing -> fallback()
  end

define recover(value :: Maybe<'A>, with: handler :: () -> Maybe<'A>) -> Maybe<'A> =
  match value as Maybe with
    | Just(v) -> Maybe.Just(v)
    | Nothing -> handler()
  end

